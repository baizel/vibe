{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { orderAPI } from \"../services/api\";\nvar initialState = {\n  orders: [],\n  currentOrder: null,\n  isLoading: false,\n  error: null\n};\nexport var createOrder = createAsyncThunk(\"orders/create\", function () {\n  var _ref = _asyncToGenerator(function* (orderData) {\n    var response = yield orderAPI.createOrder(orderData);\n    return response;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var fetchOrders = createAsyncThunk(\"orders/fetchAll\", _asyncToGenerator(function* () {\n  var response = yield orderAPI.getOrders();\n  return response;\n}));\nexport var fetchOrder = createAsyncThunk(\"orders/fetchOne\", function () {\n  var _ref3 = _asyncToGenerator(function* (orderId) {\n    var response = yield orderAPI.getOrder(orderId);\n    return response;\n  });\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nvar orderSlice = createSlice({\n  name: \"orders\",\n  initialState: initialState,\n  reducers: {\n    clearCurrentOrder: function clearCurrentOrder(state) {\n      state.currentOrder = null;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(createOrder.pending, function (state) {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(createOrder.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.orders.unshift(action.payload);\n      state.currentOrder = action.payload;\n    }).addCase(createOrder.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.error.message || \"Failed to create order\";\n    }).addCase(fetchOrders.pending, function (state) {\n      state.isLoading = true;\n    }).addCase(fetchOrders.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.orders = action.payload;\n    }).addCase(fetchOrders.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.error.message || \"Failed to fetch orders\";\n    }).addCase(fetchOrder.fulfilled, function (state, action) {\n      state.currentOrder = action.payload;\n    });\n  }\n});\nvar clearCurrentOrder = orderSlice.actions.clearCurrentOrder;\nexport { clearCurrentOrder };\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","orderAPI","initialState","orders","currentOrder","isLoading","error","createOrder","_ref","_asyncToGenerator","orderData","response","_x","apply","arguments","fetchOrders","getOrders","fetchOrder","_ref3","orderId","getOrder","_x2","orderSlice","name","reducers","clearCurrentOrder","state","extraReducers","builder","addCase","pending","fulfilled","action","unshift","payload","rejected","message","actions","reducer"],"sources":["/Users/baizel/project/fresh-trio/mobile/src/store/orderSlice.ts"],"sourcesContent":["// src/store/orderSlice.ts - Orders State Management\nimport { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { orderAPI } from \"../services/api\";\n\ninterface Order {\n  id: string;\n  items: Array<{\n    product: any;\n    quantity: number;\n    unitPrice: number;\n  }>;\n  totalAmount: number;\n  status:\n    | \"pending\"\n    | \"confirmed\"\n    | \"prepared\"\n    | \"out_for_delivery\"\n    | \"delivered\"\n    | \"cancelled\";\n  deliveryDate: string;\n  address: any;\n  createdAt: string;\n}\n\ninterface OrderState {\n  orders: Order[];\n  currentOrder: Order | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: OrderState = {\n  orders: [],\n  currentOrder: null,\n  isLoading: false,\n  error: null,\n};\n\n// Async thunks\nexport const createOrder = createAsyncThunk(\n  \"orders/create\",\n  async (orderData: any) => {\n    const response = await orderAPI.createOrder(orderData);\n    return response;\n  }\n);\n\nexport const fetchOrders = createAsyncThunk(\"orders/fetchAll\", async () => {\n  const response = await orderAPI.getOrders();\n  return response;\n});\n\nexport const fetchOrder = createAsyncThunk(\n  \"orders/fetchOne\",\n  async (orderId: string) => {\n    const response = await orderAPI.getOrder(orderId);\n    return response;\n  }\n);\n\nconst orderSlice = createSlice({\n  name: \"orders\",\n  initialState,\n  reducers: {\n    clearCurrentOrder: (state) => {\n      state.currentOrder = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Create Order\n      .addCase(createOrder.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(createOrder.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.orders.unshift(action.payload);\n        state.currentOrder = action.payload;\n      })\n      .addCase(createOrder.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || \"Failed to create order\";\n      })\n      // Fetch Orders\n      .addCase(fetchOrders.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchOrders.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.orders = action.payload;\n      })\n      .addCase(fetchOrders.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || \"Failed to fetch orders\";\n      })\n      // Fetch Single Order\n      .addCase(fetchOrder.fulfilled, (state, action) => {\n        state.currentOrder = action.payload;\n      });\n  },\n});\n\nexport const { clearCurrentOrder } = orderSlice.actions;\nexport default orderSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}